package components

import (
	"fmt"
	"io"
	"os"
	"slander/internal/systems"
	"strings"
	"slander/internal/database"
)

var validation = "js:{user,token:localStorage.token}"

templ UI(user systems.User) {
	<script>const user = {{ user.ID }}</script>
	<div id="errorBanner" class="hidden"></div>
	<div class="max-w-xl mx-auto border-x border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
		<div id="postInput" class="hidden"></div>
		@HomePost(user)
	</div>
}

templ Reply(parent systems.Post, user systems.User) {
	<div class="flex space-x-2 w-full">
		@Input(user)
	</div>
}

var (
	baseColors = "h-6 pl-2 pr-2 rounded-full text-sm"
	enabled = "dark:text-gray-950 dark:bg-gray-100 dark:hover:bg-gray-300 text-gray-50 bg-gray-800 hover:bg-gray-700"
	disabled = "dark:text-gray-950 dark:bg-gray-300 text-gray-50 bg-gray-700"
	errorColors = "dark:text-gray-950 bg-red-500 hover:bg-red-400 text-gray-50"
)

templ Input(user systems.User) {
	<img src={ user.Picture } class="h-12 w-12 rounded-full"/>
	<form
		class="flex flex-col flex-1"
		hx-post="/htmx/createpost"
		hx-swap="none"
		hx-vals={ validation }
	>
		<!-- Header -->
		<div class="flex justify-between">
			<!-- User -->
			<div class="flex items-baseline space-x-2">
				<span class="text-gray-800 dark:text-gray-200 font-semibold">{ user.DisplayName }</span>
				<span class="text-gray-500 dark:text-gray-400">&#64;{ user.ID }</span>
			</div>
			<!-- Actions -->
			<div class="flex space-x-1">
				@PostSendButton(nil)
			</div>
		</div>
		<textarea
			id="postTextArea"
			name="body"
			class="flex-1 mt-1 text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-sm"
		></textarea>
		<script>
			const btn = ()=>document.querySelector("#postSendButton.post");
			const textarea = document.querySelector("#postTextArea");

			const enabled = "{{ enabled }}".split(" ");
			const disabled = "{{ disabled }}".split(" ");

			function updateButton() {
				if (textarea.value.trim() === "") {
					btn().setAttribute("disabled", "");
					btn().classList.remove(...enabled);
					btn().classList.add(...disabled);
				} else {
					btn().removeAttribute("disabled");
					btn().classList.remove(...disabled);
					btn().classList.add(...enabled);
				}
			}

			textarea.addEventListener("keydown", ev=>{
				if (textarea.value.length > 128) {
					if (ev.key != "Backspace") {
						console.log(ev.key)
						ev.preventDefault()
					}
				}
			})
			textarea.addEventListener("input", updateButton);
		</script>
		// reset after successful post
		@ResetPostSendButton(nil)
	</form>
}

templ ErrorBanner(err error) {
	<div id="errorBanner" hx-swap-oob="true" class="fixed flex inset-0 justify-center items-start">
		<div class="flex items-center space-x-2 bg-red-500 border border-red-700 dark:border-red-300 rounded-sm w-2xl py-2 px-4 mt-5">
			@Icon("exclamation-triangle")
			<span class="flex-1">{ err.Error() }</span>
			@Icon("exclamation-triangle")
		</div>
	</div>
}

templ PostSendButton(err error) {
	{{
		var colors string
		switch err {
		case nil:
			colors = disabled + " post"
		case systems.PostSent200:
			colors = disabled
		default:
			colors = errorColors
		}
	}}
	<button
		class={ baseColors + " " + colors }
		id="postSendButton"
		hx-swap-oob="true"
		disabled?={ err == nil || err == systems.PostSent200 }
	>
		switch err {
			case nil:
				Post
			case systems.PostSent200:
				@Icon("check-lg")
				Posted!
			default:
				@Icon("exclamation-triangle")
				Error
		}
	</button>
}

templ ResetPostSendButton(err error) {
		if err == systems.PostSent200 {
			<script id="resetPostSendButton" hx-swap-oob="true">
				textarea.value = "";
				setTimeout(()=>htmx.ajax("GET", "/htmx/reset/postSendButton", {target:"#postSendButton", swap:"outerHTML"}) , 1000);
			</script>
		} else {
			<script id="resetPostSendButton" hx-swap-oob="true"></script>
		}
}

templ HomePost(user systems.User) {
	<div class="flex space-x-3 p-4 border-b border-gray-200 dark:border-gray-700">
		@Input(user)
	</div>
}

templ FloatPost(user systems.User) {
	<div id="postInput" class="fixed flex inset-0 justify-center items-start">
		<div class="flex space-x-3 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-sm w-2xl p-4 mt-5">
			@Input(user)
		</div>
	</div>
}

templ FloatReply(parent systems.Post, user systems.User) {
	<div id="postInput" class="fixed flex inset-0 justify-center items-start">
		<div class="flex space-x-3 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-sm w-2xl p-4 mt-5">
			@Reply(parent, user)
		</div>
	</div>
}

templ Post(post systems.Post) {
	<div class="flex space-x-3 p-4 border-b border-gray-200 dark:border-gray-700">
		// Avatar
		{{
			owner, err := database.GetUser(post.Owner)
			if err != nil {
				return err
			}
		}}
		<img src={ owner.Picture } class="h-12 w-12 rounded-full"/>
		// Content
		<div class="flex-1">
			// Header
			<div class="flex justify-between">
				// User
				<div class="flex items-baseline space-x-2">
					<span class="text-gray-800 dark:text-gray-200 font-semibold">{ owner.DisplayName }</span>
					<span class="text-gray-500 dark:text-gray-400">&#64;{ owner.ID }</span>
					<span class="text-gray-500 dark:text-gray-400 text-sm">Â·</span>
					<span class="text-gray-500 dark:text-gray-400 text-sm">{ systems.TimeAgo(post.Time) }</span>
				</div>
				// Actions
				<div class="flex space-x-1">
					<button class="text-gray-500 dark:text-gray-400 h-4 w-4 text-sm hover:text-gray-400 dark:hover:text-gray-300 cursor-pointer">@Icon("pencil")
</button>
					<button class="text-gray-500 dark:text-gray-400 h-4 w-4 text-sm hover:text-gray-400 dark:hover:text-gray-300 cursor-pointer">@Icon("clock-history")
</button>
					<button class="text-gray-500 dark:text-gray-400 h-4 w-4 text-sm hover:text-gray-400 dark:hover:text-gray-300 cursor-pointer">@Icon("three-dots")
</button>
				</div>
			</div>
			// Body
			<p class="mt-1 text-gray-800 dark:text-gray-200">
				{ post.Body }
			</p>
			// Actions
			<div class="grid grid-cols-4 text-gray-500 dark:text-gray-400 mt-3 max-w-md">
				// [TODO] FIX COMMENT AND REPOST COUNT
				@PostActionButton(post.ID, "comment", "chat", 0, "hover:text-blue-300 dark:hover:text-blue-500")
				@PostActionButton(post.ID, "repost", "repeat", 0, "hover:text-green-200 dark:hover:text-green-500")
				@PostActionButton(post.ID, "like", "heart", post.Likes, "hover:text-red-400 dark:hover:text-red-500")
				@PostActionButton(post.ID, "share", "share", post.Shares, "hover:text-yellow-200 dark:hover:text-yellow-500")
			</div>
		</div>
	</div>
}

templ PostActionButton(postID systems.PostID, action string, icon string, count int32, classes string) {
	<button
		hx-post={ "/htmx/postaction/" + fmt.Sprint(postID) + "/" + action }
		hx-trigger="click"
		hx-swap="outerHTML"
		class={ "flex space-x-1 items-center " + classes }
	>
		@Icon(icon)
		<span>{ systems.Trunc32(count) }</span>
	</button>
}

templ Icon(name string) {
	{{
		f, err := os.Open("node_modules/bootstrap-icons/icons/" + name + ".svg")
		if err != nil {
			return fmt.Errorf("File doesn't exist")
		}
		defer f.Close()
		b, err := io.ReadAll(f)
		if err != nil {
			return
		}
		svg := string(b)
		svg = strings.ReplaceAll(svg, `"16"`, `"1rem"`)
		svg = strings.ReplaceAll(svg, `class="`, `class="inline `)
	}}
	@templ.Raw(svg)
}

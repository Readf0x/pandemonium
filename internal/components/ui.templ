package components

import (
	"fmt"
	"io"
	"os"
	"slander/internal/systems"
	"strings"
	"slander/internal/database"
	"time"
)

func Validation(args string) string {
	c := ","
	if args == "" {
		c = ""
	}
	return fmt.Sprintf("js:{user:localStorage.user,token:localStorage.token%s%s}", c, args)
}

templ Reply(parent systems.Post, user systems.User) {
	<div class="flex space-x-2 w-full">
		{ children... }
	</div>
}

var (
	baseColors = "h-6 pl-2 pr-2 rounded-full"
	enabled = "dark:text-gray-950 dark:bg-gray-100 dark:hover:bg-gray-300 text-gray-50 bg-gray-800 hover:bg-gray-700 cursor-pointer"
	disabled = "dark:text-gray-950 dark:bg-gray-300 text-gray-50 bg-gray-700"
	errorColors = "dark:text-gray-950 bg-red-500 hover:bg-red-400 text-gray-50"
)

templ UserPicture(user systems.User) {
	<img src={ user.Picture } class="h-12 w-12 rounded-full"/>
}

script UpdateButtonJS(ev templ.JSExpression, enabled []string, disabled []string) {
	const input = htmx.closest(ev.target, "form")
	const textarea = ev.target
	const btn = htmx.find(input, "#postSendButton")

	if (textarea.value.trim() === "") {
		btn.setAttribute("disabled", "")
		btn.classList.remove(...enabled)
		btn.classList.add(...disabled)
	} else {
		btn.removeAttribute("disabled")
		btn.classList.remove(...disabled)
		btn.classList.add(...enabled)
	}
}

var UpdateButton = UpdateButtonJS(
	templ.JSExpression("event"),
	strings.Split(enabled, " "),
	strings.Split(disabled, " "),
)

script InputKeydown(ev templ.JSExpression) {
	if (ev.target.value.length > 128) {
		if (ev.key != "Backspace") {
			ev.preventDefault()
		}
	}
}

templ Input(user systems.User, post_type systems.PostType) {
	@UserPicture(user)
	<form
		class="flex flex-col flex-1"
		hx-post="/htmx/createpost"
		hx-swap="none"
		hx-vals={ Validation(fmt.Sprintf(`type:"%s"`, post_type.String())) }
	>
		@PostHeader(user, nil) {
			if post_type != systems.Original {
				<button
					type="button"
					hx-post="/htmx/reset/floatUI"
					hx-trigger="click"
					class="flex h-6 pl-2 pr-2 rounded-full text-sm items-center bg-gray-200 hover:bg-gray-300 dark:bg-gray-800 hover:dark:bg-gray-700 cursor-pointer"
				>
					@Icon("x-lg")
					<span>Cancel</span>
				</button>
			}
			@PostSendButton(nil, false)
		}
		<textarea
			id="postTextArea"
			name="body"
			hx-on:keydown={ InputKeydown(templ.JSExpression("event")) }
			hx-on:input={ UpdateButton }
			class="flex-1 mt-1 text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-sm"
		/>
		// reset after successful post
		@ResetPostSendButton(nil, false)
	</form>
}

templ PostHeader(user systems.User, time *time.Time) {
	<div class="flex justify-between">
		<div class="flex items-baseline space-x-2">
			<span class="text-gray-800 dark:text-gray-200 font-semibold">{ user.DisplayName }</span>
			<span class="text-gray-500 dark:text-gray-400">&#64;{ user.ID }</span>
			if time != nil {
				<span class="text-gray-500 dark:text-gray-400 text-sm">Â·</span>
				<span class="text-gray-500 dark:text-gray-400 text-sm">{ systems.TimeAgo(*time) }</span>
			}
		</div>
		<div class="flex relative space-x-1">
			{ children... }
		</div>
	</div>
}

templ ErrorBanner(err error) {
	if err != nil {
		<div id="errorBanner" hx-swap-oob="true" class="fixed flex inset-0 justify-center items-start z-99">
			<div class="flex items-center space-x-2 bg-red-500 border border-red-700 dark:border-red-300 rounded-sm w-2xl py-2 px-4 mt-5">
				@Icon("exclamation-triangle")
				<span class="flex-1">{ err.Error() }</span>
				@Icon("exclamation-triangle")
			</div>
			<script>
				setTimeout(()=>{
					htmx.ajax("GET", "/htmx/reset/errorBanner", {target:"#errorBanner", swap:"outerHTML"});
					htmx.ajax("GET", "/htmx/reset/postSendButton", {target:"#postSendButton", swap:"outerHTML"});
				}, 3000);
			</script>
		</div>
	} else {
	<div id="errorBanner" hx-swap-oob="true" class="hidden"></div>
	}
}

templ PostSendButton(err error, oob bool) {
	{{
		var colors string
		switch err {
		case nil:
			colors = disabled + " post"
		case systems.PostSent200:
			colors = disabled
		default:
			colors = errorColors
		}
	}}
	<button
		class={ baseColors + " text-sm " + colors }
		id="postSendButton"
		if oob {
			hx-swap-oob="true"
		}
		disabled?={ err == nil || err == systems.PostSent200 }
	>
		switch err {
			case nil:
				Post
			case systems.PostSent200:
				@Icon("check-lg")
				Posted!
			default:
				@Icon("exclamation-triangle")
				Error
		}
	</button>
}

templ ResetPostSendButton(err error, oob bool) {
		if err == systems.PostSent200 {
			<script id="resetPostSendButton" hx-swap-oob="true">
				htmx.find(htmx.closest(htmx.find("#postSendButton"), "form"), "textarea").value = ""
				setTimeout(()=>htmx.ajax("GET", "/htmx/reset/postSendButton", {target:"#postSendButton", swap:"outerHTML"}) , 3000);
			</script>
		} else {
			<script
				id="resetPostSendButton"
				if oob {
					hx-swap-oob="true"
				}
			></script>
		}
}

templ HomePost(user systems.User) {
	<div class="flex space-x-3 p-4 border-b border-gray-200 dark:border-gray-700">
		@Input(user, systems.Original)
	</div>
}

templ FloatUI() {
	<div id="postInput" hx-swap-oob="true" class="fixed flex inset-0 justify-center items-start bg-gray-950/50 z-55">
		<div class="flex space-x-3 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-sm w-2xl p-4 mt-5">
			{ children... }
		</div>
	</div>
}

templ FloatRepost(user systems.User) {
	@FloatUI() {
		@Input(user, systems.Repost)
	}
}

templ FloatReply(parent systems.Post, user systems.User) {
	@FloatUI() {
		@Reply(parent, user) {
			@Input(user, systems.Comment)
		}
	}
}

script TogglePostElt(selector string, id systems.PostID) {
	htmx.toggleClass(htmx.find(htmx.find(`#post${id}`) , selector), "hidden")
}
script TogglePostElts(selector string, id systems.PostID) {
	htmx.findAll(htmx.find(`#post${id}`) , selector).forEach(elt=>{
		htmx.toggleClass(elt, "hidden")
	})
}

templ Post(user systems.User, post systems.Post) {
	<div
		class="flex space-x-3 p-4 border-b border-gray-200 dark:border-gray-700 relative"
		id={ fmt.Sprintf("post%d", post.ID) }
	>
		// Avatar
		{{
			owner, err := database.GetUser(post.Owner)
			if err != nil {
				return err
			}
		}}
		@UserPicture(owner)
		// Content
		<div class="flex-1">
			// Header
			@PostHeader(owner, &post.Time) {
				// Actions
				<div class="flex space-x-1">
					{{
						body, err := templ.JSONString(post.Body)
						if err != nil { return err }
					}}
					<button
						hx-post={ fmt.Sprintf("/htmx/postaction/%d/resetbody", post.ID) }
						hx-vals={ Validation(fmt.Sprintf(`id:%d,body:%s`, post.ID, body)) }
						hx-on:click={ TogglePostElts(".editing", post.ID) }
						class="editing text-gray-500 dark:text-gray-400 h-4 w-4 text-sm hover:text-gray-400 dark:hover:text-gray-300 cursor-pointer hidden"
					>
						@Icon("x-lg")
					</button>
					<button
						id="editButton"
						hx-post={ fmt.Sprintf("/htmx/postaction/%d/editmode", post.ID) }
						hx-vals={ Validation(fmt.Sprintf(`id:%d,body:%s`, post.ID, body)) }
						hx-on:click={ TogglePostElts(".editing", post.ID) }
						class="editing text-gray-500 dark:text-gray-400 h-4 w-4 text-sm hover:text-gray-400 dark:hover:text-gray-300 cursor-pointer"
					>
						@Icon("pencil")
					</button>
					<button
						hx-on:click={ TogglePostElt(".originalbody", post.ID) }
						class="text-gray-500 dark:text-gray-400 h-4 w-4 text-sm hover:text-gray-400 dark:hover:text-gray-300 cursor-pointer"
					>
						@Icon("clock-history")
					</button>
					<button
						hx-on:click={ TogglePostElt(".menu", post.ID) }
						class="text-gray-500 dark:text-gray-400 h-4 w-4 text-sm hover:text-gray-400 dark:hover:text-gray-300 cursor-pointer"
					>
						@Icon("three-dots")
					</button>
				</div>
				<ul class="menu absolute -right-2 mt-6 px-2 py-1 hidden bg-white dark:bg-gray-900 rounded-sm border border-gray-200 dark:border-gray-700 text-gray-800 dark:text-gray-200">
					if post.Owner == user.ID {
						@MenuButton(fmt.Sprintf("/htmx/postaction/%d/delete", post.ID), "trash", "Delete", fmt.Sprintf("#post%d", post.ID))
					} else {
						@MenuButton(fmt.Sprintf("/htmx/postaction/%d/report", post.ID), "flag", "Report", fmt.Sprintf("#post%d", post.ID))
					}
				</ul>
			}
			// Body
			<p class="originalbody mt-1 text-gray-600 dark:text-gray-400 hidden">
				{ post.OriginalBody }
			</p>
			<p class="body mt-1 text-gray-800 dark:text-gray-200">
				{ post.Body }
			</p>
			// Actions
			<div class="pl-19 grid grid-cols-3 text-gray-500 dark:text-gray-400 mt-3 max-w-md">
				{{
					likeIcon := "heart"
					likeLink := "like"
					likeStyle := "hover:text-red-400 dark:hover:text-red-500"
					liked, err := database.QueryLike(user.ID, post.ID)
					if liked {
						likeIcon = "heart-fill"
						likeLink = "unlike"
						likeStyle = "text-red-400 dark:text-red-500"
					}
				}}
				if err != nil {
					@ErrorBanner(err)
				}
				@PostActionButton(fmt.Sprintf("/htmx/postaction/%d/comment", post.ID), "chat", 0, "hover:text-blue-300 dark:hover:text-blue-500")
				@PostActionButton(fmt.Sprintf("/htmx/postaction/%d/repost", post.ID), "repeat", 0, "hover:text-green-200 dark:hover:text-green-500")
				@PostActionButton(fmt.Sprintf("/htmx/postaction/%d/%s", post.ID, likeLink), likeIcon, post.Likes, likeStyle)
			</div>
		</div>
	</div>
}

templ NewPost(post templ.Component) {
	<div id="newPost" class="hidden"></div>
	@post
}

templ MenuButton(endpoint string, icon string, name string, postEltID string) {
	<li
		hx-post={ endpoint }
		hx-vals={ Validation("") }
		hx-swap="none"
		class="cursor-pointer hover:text-gray-400 dark:hover:text-gray-300 flex items-center space-x-1"
	>
		@Icon(icon)
		<span>{ name }</span>
	</li>
}

templ PostActionButton(endpoint string, icon string, count int32, classes string) {
	<span>
		<button
			hx-post={ endpoint }
			hx-trigger="click"
			hx-swap="none"
			hx-vals={ Validation("") }
			class={ "flex space-x-1 items-center cursor-pointer px-2 " + classes }
		>
			@Icon(icon)
			<span>{ systems.Trunc32(count) }</span>
		</button>
	</span>
}

templ Icon(name string) {
	{{
		f, err := os.Open("node_modules/bootstrap-icons/icons/" + name + ".svg")
		if err != nil {
			return fmt.Errorf("File doesn't exist")
		}
		defer f.Close()
		b, err := io.ReadAll(f)
		if err != nil {
			return
		}
		svg := string(b)
		svg = strings.ReplaceAll(svg, `"16"`, `"1rem"`)
		svg = strings.ReplaceAll(svg, `class="`, `class="inline `)
	}}
	@templ.Raw(svg)
}

script SendEdit(id systems.PostID) {
}

templ EditModeBody(body string, id systems.PostID) {
	{{ words := strings.Split(body, " ") }}
	<div id="editBody">
		for _, word := range words {
			<input value={ word }/> &#32;
		}
	</div>
	<script>
		htmx.findAll("#editBody input").forEach(inp=>EditWord(inp,{{id}}))
	</script>
}

templ Logo() {
	<div class="place-content-center flex">
		<img src="/assets/favicon.svg" class="w-40"/>
	</div>
}

var baseLogin = "rounded-full self-center w-auto px-4 mt-4 text-lg"

templ LoginButton(err error) {
	{{
		var colors string
		switch err {
		case nil:
			colors = disabled
		default:
			colors = errorColors
		}
	}}
	<button
		class={ baseLogin + " " + colors }
		id="submit"
		type="submit"
		hx-swap-oob="true"
		disabled
	>
		switch err {
			case nil:
				Login
			default:
				@Icon("exclamation-triangle")
				Error
		}
	</button>
}

templ Login() {
	<form
		hx-post="/htmx/login"
		hx-swap="none"
		class="flex flex-col place-content-center text-gray-800 dark:text-gray-200"
	>
		<span class="text-center text-3xl sm:text-xl">Login</span>
		<label class="pl-1" for="username">Username:</label>
		<input type="text" name="username" class="border border-gray-600 dark:border-gray-400 rounded-full text-lg text-center"/>
		<label class="pl-1 mt-3" for="password">Password:</label>
		<input type="password" name="password" class="border border-gray-600 dark:border-gray-400 rounded-full text-lg text-center"/>
		@LoginButton(nil)
		<script>
			const btn = ()=>document.querySelector("[type='submit']");
			const textarea = document.querySelector("[name='password']");

			const enabled = "{{ enabled }}".split(" ");
			const disabled = "{{ disabled }}".split(" ");

			function updateButton() {
				if (textarea.value.trim() === "") {
					btn().setAttribute("disabled", "");
					btn().classList.remove(...enabled);
					btn().classList.add(...disabled);
				} else {
					btn().removeAttribute("disabled");
					btn().classList.remove(...disabled);
					btn().classList.add(...enabled);
				}
			}

			textarea.addEventListener("keydown", ev=>{
				if (textarea.value.length > 128) {
					if (ev.key != "Backspace") {
						ev.preventDefault()
					}
				}
			})
			textarea.addEventListener("input", updateButton);
		</script>
	</form>
}

templ PostList(user systems.User, size int, page int, filters string) {
	{{ posts, end, err := database.GetPage(10, 0, filters) }}
	if err != nil {
		@ErrorBanner(err)
	}
	for _, post := range posts {
		@Post(user, post)
	}
	if end {
		<div class="flex flex-col items-center py-5 text-gray-400 dark:text-gray-600">
			<span>You've reached the end</span>
			<pre
				class="text-sm/4 font-[Roboto,sans-serif]"
				id="kao"
			>{Kao}</pre>
		</div>
	} else {
		<div
			hx-post="/htmx/page"
			hx-trigger="revealed"
			hx-vals={ Validation(fmt.Sprintf(`filters:"%s"`, filters)) }
		/>
	}
}

var Kao = `            ã¸           â±| 
      à«®  -   Õ )  â¡  (`+"`"+`   -  7.   
       /   â»  á¸|         |ãâ»ãµ
ä¹ (Ë Ù Ù        ããË,)ã`
